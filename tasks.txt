T1: 1 + 3 + 5

T2:(9 mod 2) + (7 * 5) in R5

T3: 5 * 5 * 5 in memory at address 4

T4:  First get a value from input using the new
 command INP [n/a] [n/a] that stores user input into R1
 If the value in R1 (x) is even, then do (x - 1) * ( x + 1)
 else do (x / 2) + (x * 2) where x is the original value in R1

T5: Get 3 numbers from the user, call them x, y and z
respectively. Then put (x + (y - z)) * z in memory
at address 5
T6: With ADD 1 [?] as your only math operator, add 1 to R5 until 
it is 101  

T7: Take an input and times it by itself


T8: Take an input in minutes and 
put the number of days in memory address 1, 
the number of hours in memory address 2, 
the number of minutes in memory address 3
e.g. 61 would give 1 hour 1 min


T9: For memory addresses 0 to 100, set their values
 to (100 MINUS address)
e.g. memory address 21 will be 100-21 = 79
T10: Create a loop where the user is asked for input,
 if the input is == 1 then exit the loop, 
 otherwise loop again

T11 ((5 > 6) OR (7 != 9)) AND 4 >= 1

T12 Enter a number if the number is > 5 and < 10 then
then pmem
else if it is >= 10 XOR <= 1
then preg
else return (T and F) and 6 > 4

T13 Take an input N and do the following until you reach 1.
If the current number N is odd then 3 * N + 1 
and take the result as the new current number N
If it is even then divide it by 2 and take the result 
as the new current number N
When N == 1 stop

T14 We will be creating a list of N numbers stored in memory.
To do this take inputs M and N. M is the head of the list in memory 
and N is the number of items in the list.  

Store N at memory address M. This is used so people reading your 
list later may know how many items there are.
Then ask for N numbers from the user and store them in address 
(M+1)-(M+N).

T15 Generate a random number with the RAND [lower_limit] [upper_limit] command.
Have a while loop that takes inputs until the input equals the generated value.
If the input is more than 10 less than the generated value then print 1, else if its 
less then print 2,
if its larger than gen value then print 3 if its within 10 of the gen value else print 4

e.g. Gen: 14
Input 1 -> 1
8 -> 2
15 -> 3
222 -> 4
14 -> end

t16 
Take an input X. 
Then work out ((X == 6) or ((X + 2) >  4)) and 
(X mod 2 == 1 or (x *3) < 10)

t17 
Give an input x. 
While X < 100 add 1 to (and update) X



T18.A We are going to create a list similar to T14, but instead of 
asking for inputs the list will contain 0,1,2,3,4... N-1
Write a program similar to T14, but only take M and N as inputs and 
set memory address (M+1) equal to 0 then (M+2) = 1 etc..

T18.B
Now that you have a list in memory, write code to access an index given by INP.
Keep asking for INP and printing the value until you receive -1 in INP. (There is a PRINT command)
